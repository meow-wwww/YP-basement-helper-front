现在还没做的事：
1.按照房间的预约信息渲染时间表
2.向服务器发送预约请求（时间格式：字符串“2017-11-23 16:10:10”）
3.首页：
	第一次打开的时候有些数据可能显示不出来
	“最近一条预约”还没写出来（大概需要排序？）
4.预约房间 填写时间的时候：最好把时间划分出来 以15分钟为单位 比如房间开放时间是9:00-22:00 则开始时间只能是9:00 9:15 9:30 ... 21:30 21:45，结束时间只能是9:15 9:30 ... 21:30 21:45 22:00（要修改选择器）
5.信用系统 数据库里好像只有信用分 没有违约记录
6.各种错误处理 要返回给用户


【地下室预约系统接口】

【返回值】的接口规范：
返回值为一个json对象，
data为业务数据，必须是任意 JSON 数据类型(number/string/boolean/object/array)
status为响应状态，必须为非负整数，0表示响应成功，大于0表示响应失败（具体值表示的含义可以再定，比如1表示未授权时调用需要授权的接口，等等）
statusInfo只有在响应失败时才有，必须为 JSON 数据类型
其中：
message为用户提示信息，
detail用来防止错误的详细信息，例如异常Exception

ret = {
    "data": {},
    "status": 0,
    "statusInfo": {
        "message": "给用户的提示信息",
        "detail": "用于排查错误的详细错误信息"
    }
}


【百度自习室摄像头接口】待联络

【地下室预约房间接口】

1. 获取所有预约信息（想想这个好像没什么用？）

url 地址：http://39.107.70.176:9000/appointment/get-appoint
方法：GET
参数：无

返回值：
'data': [
    {
        'Aid': '',  # 预约编号
        'Atime': '',  # 申请提交时间
        'Astart': '',  # 开始使用时间
        'Afinish': '',  # 结束使用时间
        'Ausage': '',  # 房间用途
        'Astatus': '',  # 预约状态
        'Rid': '',  # 房间编号
        'Rtitle': '',  # 房间名称
        'students': [  # 预约人
            {
                'Sname': '',  # 预约人姓名
            },
            ...
        ]
    },
    ...
]


2. 获取所有房间✅

url 地址：http://39.107.70.176:9000/appointment/get-room
方法：GET
参数：无

返回值：
'data': [
    {
        'Rid': '',  # 房间编号
        'Rtitle': '',  # 房间名称
        'Rmin': '',  # 房间最少预约人数
        'Rmax': '',  # 房间最多使用人数（建议）
        'Rstart': '',  # 房间最早预约时间
        'Rfinish': '',  # 房间最晚预约时间
        'Rstatus': '',  # 当前房间状态，0表示可预约'Permitted'，1表示当前不可预约'Forbidden'
    },
    ...
]


3. 获取某个房间的预约信息

url 地址：http://39.107.70.176:9000/appointment/get-room
方法：POST
参数：Rid

返回值：
'data': [
    {
        'Aid': '',  # 预约编号
        'Atime': '',  # 申请提交时间
        'Astart': '',  # 开始使用时间
        'Afinish': '',  # 结束使用时间
        'Ausage': '',  # 房间用途
        'students': [  # 预约人
            {
                'Sname': '',  # 预约人姓名
            },
            ...
        ]
    },
    ...
]


4. 申请预约

url 地址：http://39.107.70.176:9000/appointment/add-appoint
方法：POST
参数：Json对象，内容如下：{
    'Astart': '',  # 开始使用时间
    'Afinish': '',  # 结束使用时间
    'Ausage': '',  # 房间用途
    'Rid': '',  # 房间编号
    'Rtitle': '',  # 房间名称
    'students': [  # 预约人
        {
            'Sid': '',  # 预约人学号
            'Sname': '',  # 预约人姓名
        },
        ...
    ]
}

返回值：
'data': {}


5. 查询个人所有预约信息

url 地址：http://39.107.70.176:9000/appointment/get-student
方法：POST
参数：Sid

返回值：
'data': [
    {
        'Aid': '',  # 预约编号
        'Atime': '',  # 申请提交时间
        'Astart': '',  # 开始使用时间
        'Afinish': '',  # 结束使用时间
        'Ausage': '',  # 房间用途
        'Astatus': '',  # 房间状态，0预约中appointed，1进行中processing，2等待确认waiting，3已确认confirmed，4已取消cancelled，(5, 'violated')
        'students': [  # 预约人
            {
                'Sname': '',  # 预约人姓名
            },
            ...
        ]
    },
    ...
]


6. 改变预约状态（包括取消预约，管理员确认（学生在使用结束后自动确认））

url 地址：http://39.107.70.176:9000/appointment/update-appoint
方法：POST
参数：Aid, Astatus(取值范围：0预约中appointed，1进行中processing，2等待确认waiting，3已确认confirmed，4已取消cancelled，5'violated'))

返回值：
'data': {}


****************下面这俩可能用处不大 直接在后台改就行********************
7. 创建学生
url 地址：http://39.107.70.176:9000/appointment/add-student
方法：POST
参数：Sid Sname
返回值：
无


8. 创建房间
url 地址：http://39.107.70.176:9000/appointment/add-room
方法：POST
参数：Rid, Rtitle, Rmin, Rmax, Rstatus

返回值：
无



【数据库】
http://39.107.70.176:9000/admin/
用户名：admin
密码：YPadmin
这个是管理员用户，可以直接修改数据库里的数据
